# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Tutee @model {
  id: ID!
  nickname: String!
  x: Float!
  y: Float!
  to: String
  state: String!
  character: String,
  ttl: Int
}

type Auditorium @model {
  id: ID!
  title: String!
  description: String
  image: String
  url: String!
}

type Classroom @model {
  id: ID!
  title: String!
  description: String
  image: String
}

type Course @model {
  id: ID!
  title: String!
  icon: String
  tutor_voice: String!
  tutor_character: String!
  tutor_gender: String!
  language: String!
  order: Int
}

type Lecture @model {
  id: ID!
  course_ref: String!
  title: String!
  order: Int
}

type Meeting @model(mutations: {create: "createMeetingGraphQL", delete: "deleteMeetingGraphQL"}, subscriptions: null) {
  meetingId: String!
  title: String! @primaryKey
  data: String!
}

type Attendee @model(mutations: {create: "createAttendeeGraphQL", delete: "deleteAttendeeGraphQL"}, subscriptions: null) {
  attendeeId: String! @primaryKey
  name: String!
}

type Query {
  createChimeMeeting(title: String, name: String, region: String): Response @function(name: "chimeClassroom-${env}")
  joinChimeMeeting(meetingId: String, name: String): Response @function(name: "chimeClassroom-${env}")
  endChimeMeeting(meetingId: String): Response  @function(name: "chimeClassroom-${env}")
}

type Response {
  statusCode: String!
  headers: String
  body: String
  isBase64Encoded: String
}